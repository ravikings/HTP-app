"""Unittest for function generating output data by processing two input datasets."""
import unittest
import pandas as pd


class LoadDataTestCase(unittest.TestCase):
    """A unit test case for the `load_data()` function, which loads data from a file.

    This test case checks that the `load_data()` function correctly handles various input scenarios,
    including:

    - When the file path is invalid or does not exist
    - When the file is empty
    - When the file contains invalid data
    - When the file contains valid data in the expected format
    """

    # Define the function to test
    def generate_output_file(self, table1, table2):
        """
        Generate an output table by processing two input tables.

        Args:
        - table1 (pandas.DataFrame): A table containing invoice data with columns "invoice_id", \
            "legal_entity", "counter_party", "rating", "status", and "value".
        - table2 (pandas.DataFrame): A table containing counter party data with \
            columns "counter_party" and "tier".

        Returns:
        - output (pandas.DataFrame): A table with columns "legal_entity", "counter_party", "tier",\
            "max_rating", "sum_value_arap", and "sum_value_accr". \
            This table is generated by performing the following operations:
            1. Add a "tier" column to table1 by looking up the "tier" \
                value for each counter party in table2.
            2. Split table1 into two tables based on the value of the "status" column.
            3. For each table, group by "legal_entity", "counter_party", and "tier",\
                and compute the sum of "value" for each group.
            4. Merge the two tables generated in step 3 based on the columns "legal_entity", \
            "counter_party", and "tier".
            5. For each group, compute the maximum value of the "rating" column in table1.
            6. Select the desired columns from the merged table and return the result.

        """
        table1["tier"] = table1["counter_party"].map(
            table2.set_index("counter_party")["tier"]
        )
        table1_arap = table1.loc[table1["status"] == "ARAP"]
        table1_accr = table1.loc[table1["status"] == "ACCR"]
        sum_arap = table1_arap.groupby(["legal_entity", "counter_party", "tier"]).agg(
            sum_value_arap=("value", "sum")
        )
        sum_accr = table1_accr.groupby(["legal_entity", "counter_party", "tier"]).agg(
            sum_value_accr=("value", "sum")
        )
        merged_table = pd.merge(
            sum_arap,
            sum_accr,
            on=["legal_entity", "counter_party", "tier"],
            how="outer",
        )
        merged_table["max_rating"] = table1.groupby(
            ["legal_entity", "counter_party", "tier"]
        ).agg(max_rating=("rating", "max"))
        output = merged_table.reset_index()
        output = output[
            [
                "legal_entity",
                "counter_party",
                "tier",
                "max_rating",
                "sum_value_arap",
                "sum_value_accr",
            ]
        ]
        return output

    # Define the test cases
    def test_generate_output_file(self):
        """
        Test the generate_output_file function with various input scenarios.

        This function creates different scenarios to test the generate_output_file function, \
            which takes two pandas DataFrames as input: `table1` and `table2`. \
                The function calculates the sum of values for each counter party and \
                    the maximum rating for each legal entity, counter party and tier. \
                        It also adds a tier column from table2 to table1.

        This test case checks the function's behavior when both tables are empty.

        Test case inputs:
        - table1: empty pandas DataFrame with columns "invoice_id", \
            "legal_entity", "counter_party", "rating", "status" and "value".
        - table2: empty pandas DataFrame with columns "counter_party" and "tier".

        Expected output: empty pandas DataFrame with columns "legal_entity", \
            "counter_party", "tier", "max_rating", "sum_value_arap" and "sum_value_accr".
        """
        # Test case 1: Empty tables
        table1 = pd.DataFrame(
            columns=[
                "invoice_id",
                "legal_entity",
                "counter_party",
                "rating",
                "status",
                "value",
            ]
        )
        table2 = pd.DataFrame(columns=["counter_party", "tier"])
        expected_output = pd.DataFrame(
            columns=[
                "legal_entity",
                "counter_party",
                "tier",
                "max_rating",
                "sum_value_arap",
                "sum_value_accr",
            ]
        )
        assert self.generate_output_file(table1, table2).equals(expected_output)

    # Test case 2: columns are equal
    def test_columns_are_equal(self):
        """
        Test the generate_output_file function with various input scenarios.

        This function creates different scenarios to test the generate_output_file function,\
            which takes two pandas DataFrames as input: `table1` and `table2`. \
                The function calculates the sum of values for each counter party and \
                    the maximum rating for each legal entity, counter party and tier. \
                        It also adds a tier column from table2 to table1.

        This test case checks the function's behavior when both if columns are equal.

        Test case inputs:
        - table1: empty pandas DataFrame with columns "invoice_id", "legal_entity",\
            "counter_party", "rating", "status" and "value".
        - table2: empty pandas DataFrame with columns "counter_party" and "tier".

        Expected output: empty pandas DataFrame with columns "legal_entity", \
            "counter_party", "tier", "max_rating", "sum_value_arap" and "sum_value_accr".
        """
        table1 = pd.DataFrame(
            {
                "invoice_id": [1, 2, 3, 4],
                "legal_entity": ["L1", "L2", "L3", "L1"],
                "counter_party": ["C1", "C2", "C3", "C4"],
                "rating": [1, 2, 4, 6],
                "status": ["ARAP", "ARAP", "ACCR", "ARAP"],
                "value": [10, 20, 30, 40],
            }
        )
        table2 = pd.DataFrame(
            {"counter_party": ["C1", "C2", "C3", "C4"], "tier": [1, 2, 3, 4]}
        )
        expected_output = pd.DataFrame(
            {
                "legal_entity": ["L1", "L1", "L2", "L3"],
                "counter_party": ["C1", "C4", "C2", "C3"],
                "tier": [1, 4, 2, 3],
                "max_rating": [1, 6, 2, 4],
                "sum_value_arap": [10, 40, 20, 0],
                "sum_value_accr": [0, 0, 0, 30],
            }
        )
        actual_output = self.generate_output_file(table1, table2)
        assert actual_output[
            ["legal_entity", "counter_party", "tier", "max_rating"]
        ].equals(
            expected_output[["legal_entity", "counter_party", "tier", "max_rating"]]
        )
